{"version":3,"sources":["util/giphyAPI.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["giphyAPI","getImages","axios","get","ImgStyled","styled","img","_templateObject","HeaderBar","div","_templateObject2","Game","state","m_guessedIndicies","m_randomIndexArr","m_listOfImageUrls","m_nScore","m_nTopScore","m_szUserInstruction","m_szUserInstructions","handleClick","_event","preventDefault","dataId","target","getAttribute","_this","addUserGuess","console","log","bNumExists","randomIndexArr","length","randomNum","Math","floor","random","i","push","this","setState","_indexOfImg","_this2","userGuesses","bFound","forEach","_index","topScore","randomNumGen","_this3","giphyApi","then","_response","images","data","_image","fixed_height_small_still","url","_this4","react_default","a","createElement","style","width","backgroundColor","marginLeft","float","map","_num","key","src","onClick","data-id","alt","Component","App","Fragment","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1e2a2a3.chunk.js","sourcesContent":["/**\n * \n *      giphyAPI.js\n * \n */\n\nimport axios from \"axios\";\n\nfunction getImages() { \n\n    var apiKey = \"dc6zaTOxFJmzC\";\n    var searchQuery = \"cheeseburgers\";\n    var limit = 10;\n    var qs = \"https://api.giphy.com//v1/gifs/search?q=\" + searchQuery + \"&limit=\" + limit + \"&api_key=\" + apiKey;\n    \n    return axios.get(qs);\n}\n\nexport default { getImages };","/**\n * \n *      Game.js (component)\n * \n */\n\nimport React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport giphyApi from \"../util/giphyAPI\";\n\n\nvar ImgStyled = styled.img`\n    border: 1px solid green;\n    margin: 5px;\n`\n\nvar HeaderBar = styled.div`\n    background-color: purple;\n    width: 100%;\n    height: 50px;\n    color: white;\n    padding-left: 30px;\n    padding-right: 30px;\n    font-size: 33px;\n`\n\nclass Game extends Component { \n\n    state = {\n        m_guessedIndicies: [],\n        m_randomIndexArr: [],\n        m_listOfImageUrls: [],\n        m_nScore: 0,\n        m_nTopScore: 0,\n        m_szUserInstruction: \"Click an image to begin!\",\n        m_szUserInstructions: [\"Click an image to begin!\", \"You guessed correctly!\", \"You guessed incorrectly!\"]\n    };\n\n    randomNumGen() { \n\n        var bNumExists = false;\n        var randomIndexArr = [];\n        // loop through the random index array\n        while (randomIndexArr.length !== 10) { \n\n            // find a random number between 0 and 9\n            var randomNum = Math.floor(Math.random() * 10);\n            for (let i = 0; i < randomIndexArr.length; i++) { \n\n                // if the random number is already in the array then set the flag and break from the loop\n                if (randomNum === randomIndexArr[i]) { \n                    bNumExists = true;\n                    i = randomIndexArr.length;\n                }\n            }\n\n            // if the random number exists dont add it to the array and continue in the loop\n            if (bNumExists) {\n                bNumExists = false;\n                // if it does exists add it to the array\n            } else { \n                randomIndexArr.push(randomNum);\n            }\n        }\n\n        this.setState({m_randomIndexArr: randomIndexArr});\n    }\n\n    addUserGuess(_indexOfImg) { \n\n        // get a copy of the guesses\n        var userGuesses = this.state.m_guessedIndicies;\n        var bFound = false;\n\n        console.log(userGuesses);\n        // check to see if the user has guessed the index already\n        userGuesses.forEach(_index => { \n           \n            // if the index is equal to the one being added\n            if (_index === _indexOfImg) { \n\n                //console.log(\"repeat found\");\n\n                // check to see if they got a new top score\n                var topScore = this.state.m_nTopScore;\n                if (this.state.m_nScore > this.state.m_nTopScore) { \n                    topScore = this.state.m_nScore;\n                }\n\n                var empty = [];\n\n                // reset the score and set the new top score if there was one\n                this.setState({ m_szUserInstruction: this.state.m_szUserInstructions[2], m_guessedIndicies: empty, m_nScore: 0, m_nTopScore: topScore });\n                bFound = true;\n            }\n        });\n\n        if (!bFound) {\n            // if none of the guesses were already in the list, add it now\n            userGuesses.push(_indexOfImg);\n            console.log(\"guess added\");\n            // set the new state\n            this.setState({ m_szUserInstruction: this.state.m_szUserInstructions[1], m_nScore: this.state.m_nScore + 1, m_guessedIndicies: userGuesses });\n        }\n\n        this.randomNumGen();\n\n    }\n\n    getImages() { \n        giphyApi.getImages().then(_response => { \n\n            var images = [];\n            _response.data.data.forEach(_image => { \n                // console.log(_image.images.fixed_height_small_still);\n                images.push(_image.images.fixed_height_small_still.url);\n            });\n            \n            this.setState({\n                m_listOfImageUrls: images\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.randomNumGen();\n        \n        this.getImages();\n        \n    }\n\n    handleClick = _event => { \n        _event.preventDefault();\n\n        var dataId = _event.target.getAttribute(\"data-id\");\n\n        this.addUserGuess(dataId);\n        console.log(dataId);\n    }\n\n    render() { \n        return (<div style={{ width: 1000, backgroundColor: \"orange\"}}>\n            <HeaderBar>\n                <span>Clicky Game!</span>\n                <span style={{marginLeft: 100}}>{this.state.m_szUserInstruction}</span>\n                <span style={{float: \"right\"}}>Score: {this.state.m_nScore}  |  Top Score: {this.state.m_nTopScore}</span>\n            </HeaderBar>\n       \n            {this.state.m_randomIndexArr.map(_num =>\n                <ImgStyled\n                key={_num}\n                src={this.state.m_listOfImageUrls[_num]}\n                onClick={this.handleClick}\n                data-id={_num}\n                    alt=\"img\"></ImgStyled>)}\n            <HeaderBar></HeaderBar>\n        </div>);\n        }\n    };\n    \nexport default Game;","/**\n * \n *    App.js\n * \n */\n\nimport React from 'react';\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return (\n    <>\n    <Game></Game>\n      \n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}